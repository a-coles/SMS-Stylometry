import numpy as np
import random

from sklearn import preprocessing
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt

from keras.models import load_model

# This script generates a 2D-transformed plot of the learned
# "location embeddings" as learned by the GT-Embedding RNN.

if __name__ == '__main__':
    # Get words and indices
    word_indices = {}
    with open('word_indicies.txt', 'r') as fp:
        wi_lines = fp.readlines()
        for line in wi_lines:
            line = line.strip().split(',')
            word_indices[int(line[1])] = line[0]

    model = load_model('../gt_embedding_model_with_dropout.h5')
    weights = model.layers[0].get_weights()[0]

    sg_words = ['lah', 'handphone', 'hdb', 'shuhui', 'chio', 'pinyin']
    uk_words = ['flat', 'colour', 'realised', 'lorry', 'sacked', 'mum', 'pub', 'pubs', 'learnt', 'film', 'centre', 'mobile', 'marks']
    us_words = ['apartment', 'color', 'realized', 'truck', 'fired', 'mom', 'movie', 'center', 'grade']

    other = []
    # Other interesting figures are generated by:
    #random.seed(19)
    #random.seed(16)
    #random.seed(13)
    #random.seed(10)
    random.seed(47)
    for i in range(0, 50):
        other.append(random.choice(list(word_indices.values())))

    words_of_interest = sg_words + uk_words + us_words + other
    to_plot_matrix = []

    for word in words_of_interest:
        found = False
        for key, value in word_indices.items():
            if value == word:
                found = True
                word_weight = weights[key]
                to_plot_matrix.append(word_weight)
                break
        if found == False:
            print "We didn't find \'{}\' in the corpus.".format(word)

    to_plot_matrix = np.array(to_plot_matrix)


    tsne_model = TSNE(n_components=2, random_state=43)
    vectors = tsne_model.fit_transform(to_plot_matrix)

    fig, ax = plt.subplots(figsize=(20, 7))
    for i, word in enumerate(words_of_interest):
        if word in sg_words:
            marker_color = 'b'
        elif word in uk_words:
            marker_color = 'r'
        elif word in us_words:
            marker_color = 'g'
        else:
            marker_color = 'black'
        ax.scatter(vectors[i][0], vectors[i][1], s=2, color=marker_color)
        ax.text(vectors[i][0], vectors[i][1], '%s' % (word), zorder=1, color=marker_color)

    plt.savefig('../figures/embeddings.png')
